import &StandardImport

{}
  supportedKeyChars =
    " -/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"

  middleKeyChar = supportedKeyChars[supportedKeyChars.length / 2 | 0]

  ##
    IN:
      startAfter: <String>
      stopAt:     <String>
    OUT:
      if stopAt <= startAfter,
        NULL
      else
        <String> new Key
          startAfter < Key
          Key < stopAt
  getBisectKey = (startAfter, stopAt) -> if startAfter < stopAt
    i = 0
    while startAfter[i] == stopAt[i]
      i++
    charIndex1 = supportedKeyChars.indexOf startAfter[i]
    charIndex2 = supportedKeyChars.indexOf stopAt[i]

    if charIndex1 < 0 || charIndex2 < 0
      throw new Error "Invalid character found in inputs:\n" + formattedInspect {} startAfter, stopAt, i, charIndex1, charIndex2, supportedKeyChars

    else if charIndex1 + 1 == charIndex2
      # log one-different: startAfter, stopAt, i, charIndex1, charIndex2
      startAfter.slice 0, i
      + middleKeyChar

    else if charIndex1 < charIndex2
      # log more-than-one-different: startAfter, stopAt, i, charIndex1, charIndex2
      startAfter.slice 0, i
      + supportedKeyChars[(charIndex1 + charIndex2) / 2 | 0]

    else
      # should be impossible to reach here
      throw new Error "FAIL #{charIndex1} < #{charIndex2} is false:\n" + formattedInspect {} startAfter, stopAt, i, charIndex1, charIndex2, supportedKeyChars

