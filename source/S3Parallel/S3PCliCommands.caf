import &StandardImport, &Lib

quietDefaultIfApi = (f) ->
  (options) ->
    f merge options, quiet: options.quiet ? if options.fromCli then false else true

{}
  version: -> &package.version

  ls: (options) ->
    items = []
    options extract onItem, output, fromCli, verbose
    output ?= (v) -> console.log v
    onItem ?=
      if fromCli
        ({LastModified, Size, Key}) ->
          output
            if options.long
              "" #{formatDate LastModified, "yyyy-mm-dd HH:MM:ss"} #{pad humanByteSize(Size), 10, ' ', true} #{Key}
            else Key
      else
        (item) -> items.push item

    &S3Comprehensions.each merge
      quiet: true
      options
      mapList: (l) ->
        each item from-array l
          onItem item
        null
    .then (info) ->
      if fromCli then if verbose then info else null
      else if verbose then merge info, {} items else items

  listBuckets:  quietDefaultIfApi &lib/S3.listBuckets
  summarize:    quietDefaultIfApi &S3P.summarize
  compare:      quietDefaultIfApi &S3P.compare
  cp:           quietDefaultIfApi &S3P.copy
  sync:         quietDefaultIfApi &S3P.sync
  each:         quietDefaultIfApi &S3Comprehensions.each
  map:          quietDefaultIfApi &S3Comprehensions.map
