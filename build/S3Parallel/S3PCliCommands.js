"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "console", "JSON", "formatDate", "pad", "humanByteSize"], [global, require('./StandardImport'), require('./Lib')], (merge, console, JSON, formatDate, pad, humanByteSize) => {return {version: function() {return require('../../package').version;}, ls: function(options) {let items, onItem, output, fromCli, verbose, raw, longForm; items = []; onItem = options.onItem; output = options.output; fromCli = options.fromCli; verbose = options.verbose; raw = options.raw; longForm = options.long; output != null ? output : output = (v) => console.log(v); onItem != null ? onItem : onItem = fromCli ? (item) => {let LastModified, Size, Key; LastModified = item.LastModified; Size = item.Size; Key = item.Key; return output((() => {switch (false) {case !raw: return JSON.stringify(item); case !longForm: return `${Caf.toString(formatDate(LastModified, "yyyy-mm-dd HH:MM:ss"))} ${Caf.toString(pad(humanByteSize(Size), 10, " ", true))} ${Caf.toString(Key)}`; default: return Key;};})());} : (item) => items.push(raw ? item : item.Key); return require('./S3Comprehensions').each(merge({quiet: true}, options, {mapList: (l) => {let from, into, to, i; from = l; into = from; if (from != null) {to = from.length; i = 0; while (i < to) {let item; item = from[i]; onItem(item); i++;};}; into; return null;}})).then((info) => fromCli ? verbose ? info : null : verbose ? merge(info, {items}) : items);}, listBuckets: require('./Lib/S3').listBuckets, summarize: require('./S3P').summarize, compare: require('./S3P').compare, cp: require('./S3P').copy, sync: require('./S3P').sync, each: require('./S3Comprehensions').each, map: require('./S3Comprehensions').map};});});
//# sourceMappingURL=S3PCliCommands.js.map
