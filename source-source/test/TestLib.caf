import &StandardImport

_largeListP = null

{}

  ##
    IN: keys: strings to use as Keys
    OUT:
      mocked AWS S3 sdk implementing minimal api:"

        ##
          IN: only limit and startAfter are supported (all S3P needs)
          OUT:
            list of objects with these keys:
              Key: one of the passed in key-strings
              Size: Key.length:
                for easy testing, the size of simulated keys are the length of their keys
        list: ({limit, startAfter}) ->


    https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#listObjectsV2-property
  mockS3 = (keys...) ->
    keys =
      compactFlatten keys
      .sort()

    list: ({limit=1000, startAfter}) ->
      count = 0
      Promise.then ->
        array file in keys when file > startAfter && count < limit
          count++
          Key:            file
          Size:           file.length
          LastModified:   new Date
          ETag:           :abc123
          StorageClass:   :STANDARD
          Owner:
            DisplayName:  :john
            ID:           :abc123


  generateLargeFileList = ->
    paths =
      :run1/job-status//
      :run2/job-status/
      :run2/sync-status/
      :run2/fluffy/
      :run2/upload-status/
      :run2/output/

    each path in paths into out = []
      array i til 10000 into out
        "" #{path}#{randomString()}

    .sort()

  getLargeFileList = ->
    _largeListP ?= Promise.then generateLargeFileList
