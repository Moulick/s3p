import &ArtStandardLib, &ArtClassSystem

## TODO
  PWP should

  - allow an amount of queueing in any order. A queue action automatically starts up 'workers'
  - .then could be configured to resolve on the next "empty queue", but really we don't need that for now.

class PromiseWorkerPool extends BaseClass

  constructor: (@_maxWorkers = 10) ->
    @_stats =
      jobs: queued: 0 started: 0 succeeded: 0 failed: 0
      maxActiveWorkers: 0
    @_queue = []
    @_availableWorkers = @_maxWorkers

  @getter :stats
  @getter
    queueSize: -> @_queue.length
    activeWorkers: -> @_maxWorkers - @_availableWorkers


  # OUT: a promise that resolves/rejects job's return value or error
  #   Except that the promise might be delayed if there are no workers available
  queue: (job) ->
    @_jobCount++
    new Promise (resolve, reject) ->
      @_stats.jobs.queued++
      @_queue.push ->
        @_stats.jobs.started++
        Promise
        .then job
        .tap -> @_stats.jobs.succeeded++
        .tapCatch -> @_stats.jobs.failed++
        .then resolve, reject
      @_work()

  _work: ->
    if @_availableWorkers > 0 && work = @_queue.pop()
      @_finishWork ?= ->
        @_availableWorkers++
        @_work()

      @_availableWorkers--
      @_stats.maxActiveWorkers = max @_stats.maxActiveWorkers, @activeWorkers
      Promise.then work
      .finally @_finishWork
