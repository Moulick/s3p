import &StandardImport

noop = ->

mockS3 = (files...) ->
  files =
    compactFlatten files
    .sort()

  list: ({limit=1000, startAfter}) ->
    count = 0
    Promise.then ->
      array file in files when file > startAfter && count < limit
        count++
        Key: file
        Size: file.length # string length

_getLargeFileListP = null
getLargeFileList = ->
  _getLargeFileListP ?=
    shellExec 'find .'
    .then (out) ->
      out.trim().split "\n"
      .sort()

suite:
  getBucketSummary: ->
    test :3-items ->
      S3P.getBucketSummary
        limit: 2
        s3: mockS3
          :alpha
          :beta
          :gamma
      .then ({count, size}) ->
        assert.eq 3, count
        assert.eq 14, size

    test :many-items ->
      getLargeFileList()
      .then (files) ->
        S3P.getBucketSummary
          limit: 100
          s3: mockS3 files
        .then ({count, size}) ->
          assert.eq files.length, count
          assert.lt files.length, size
          assert.eq files.join('').length, size

  each: ->
    test :S3P.each ->
      S3P.each
        limit: 2
        s3: mockS3
          :alpha
          :beta
          :gamma

      .then (out) ->
        assert.selectedEq
          itemsFound: 3
          # requestsUsed: 6
          out

    test "S3P.each limit:3"->
      S3P.each
        limit: 3
        s3: mockS3
          :alpha
          :beta
          :gamma

      .then (out) ->
        assert.selectedEq
          itemsFound: 3
          # requestsUsed: 6
          out


    test "S3P.each limit:4"->
      S3P.each
        limit: 4
        s3: mockS3
          :alpha
          :beta
          :gamma

      .then (out) ->
        assert.selectedEq
          itemsFound: 3
          # requestsUsed: 2
          out

    test "S3P.each limit:2 large common prefix"->
      S3P.each
        limit: 2
        s3: mockS3
          :some/path/to/my/files/alpha
          :some/path/to/my/files/beta
          :some/path/to/my/files/gamma

      .then (out) ->
        assert.selectedEq
          itemsFound: 3
          # requestsUsed: 6
          out

    test :S3P.each_custom_count_3 ->
      count = 0
      S3P.each
        limit: 2
        map: -> count++
        s3: mockS3 files =
          :alpha
          :beta
          :gamma

      .then (out) ->
        assert.eq files.length, count
        assert.eq out.itemsFound, count

    test :S3P.each_custom_count_10 ->
      count = 0
      S3P.each
        limit: 2
        map: -> count++
        s3: mockS3 files =
          :059
          :0934t09g
          :alpha
          :alpha123
          :alpha9
          :as09df
          :asd
          :asdf
          :beta
          :gamma

      .then (out) ->
        assert.eq files.length, count
        assert.eq out.itemsFound, count

    @timeout 10000

    test :bigTest ->
      getLargeFileList()
      .then (files) ->

        S3P.each
          limit: 10
          # showProgress: true
          # debug: true
          s3: mockS3 files

        .then (out) ->
          # log {} out
          assert.eq files.length, out.itemsFound

  regressions: ->
    @timeout 10000
    test :lims ->
      Promise.resolve '' + &fs.readFileSync "test/data/large-list.txt"
      .then (out) ->
        files =
          out.trim().split "\n"
          .sort()

        S3P.each
          limit: 1000
          # progress: true
          # debug: true
          # prefix: :run2/pipeline-output-index/
          # aggressive: true
          s3: mockS3 files

        .then (out) ->
          # log {} out
          # assert.eq files.length, out.itemsFound
