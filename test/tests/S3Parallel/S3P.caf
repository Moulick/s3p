import &StandardImport

noop = ->

mockS3 = (files...) ->
  files =
    compactFlatten files
    .sort()

  list: ({bucket, limit=1000, startAfter}) ->
    count = 0
    array file in files when file > startAfter && count < limit
      count++
      Key: file
      Size: 1

suite: each: ->
  test :S3P.each ->
    S3P.each
      limit: 1
      noop
      mockS3
        :alpha
        :beta
        :gamma

    .then (out) ->
      assert.selectedEq
        itemsFound: 3
        requestsUsed: 8
        out

  test "S3P.each limit:2"->
    S3P.each
      limit: 2
      noop
      mockS3
        :alpha
        :beta
        :gamma

    .then (out) ->
      assert.selectedEq
        itemsFound: 3
        requestsUsed: 4
        out

  test :S3P.each_custom_count_3 ->
    count = 0
    f = -> count++
    S3P.each
      limit: 1
      f
      mockS3 files =
        :alpha
        :beta
        :gamma

    .then (out) ->
      assert.eq files.length, count
      assert.eq out.itemsFound, count

  test :S3P.each_custom_count_10 ->
    count = 0
    f = -> count++
    S3P.each
      limit: 1
      f
      mockS3 files =
        :059
        :0934t09g
        :alpha
        :alpha123
        :alpha9
        :as09df
        :asd
        :asdf
        :beta
        :gamma

    .then (out) ->
      assert.eq files.length, count
      assert.eq out.itemsFound, count
